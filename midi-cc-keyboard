#!/usr/bin/env python3

import tkinter as tk
import rtmidi
import rtmidi.midiutil


# global variables
midi_channel = 1
gui_sliders = []


# open midi input
midi_in = rtmidi.MidiIn(name="Midi CC Keyboard")
midi_in_ports = midi_in.get_ports()
midi_in.ignore_types(sysex=False, timing=False, active_sense=False)
midi_in.open_virtual_port("In")

# open midi output
midi_out = rtmidi.MidiOut(name="Midi CC Keyboard")
midi_out_ports = midi_out.get_ports()
midi_out.open_virtual_port("Out")


# midi input events
def midi_in_callback(message, callb_data):
	global midi_channel
	global gui_sliders

	midi_data = message[0]
	print("midi rx: " + ' '.join(hex(d) for d in midi_data))

	if len(midi_data) != 3:
		return

	# check message is cc
	if (midi_data[0] & 0xf0) != 0xb0:
		return

	# compare channel
	if (midi_data[0] & 0x0f) != (midi_channel-1):
		return

	# log cc message
	print("midi rx cc: " + hex(midi_data[0]) + " " + hex(midi_data[1]) + " " + hex(midi_data[2]))

	# modify slider value
	slider_idx = midi_data[1]
	slider_val = midi_data[2]
	gui_sliders[slider_idx].set(slider_val)


midi_in.set_callback(midi_in_callback)


# gui change events
def channel_slider_evt(data):
	global midi_channel

	midi_channel = int(data)
	print("channel_slider_evt midi_channel="+str(midi_channel))

def slider_event(controller, data):
	global midi_channel

	# allow multiple channels
	msg = 0xB0 | (midi_channel-1)

	cc = [msg, controller, data]
	print("midi tx cc: " + hex(cc[0]) + " " + hex(cc[1]) + " " + hex(cc[2]))
	midi_out.send_message(cc)



# gui
root = tk.Tk()
root.title("Midi CC Keyboard")

top_content = tk.Frame(root)
top_content.grid(column=0, row=0)

content = tk.Frame(root)
content.grid(column=0, row=1)


# midi channel slider
w = tk.Label(top_content, text="MIDI Channel:")
w.grid(column=0, row=0)

w = tk.Scale(top_content, from_=1, to=16, orient=tk.HORIZONTAL, command=channel_slider_evt)
w.set(1)
w.grid(column=1, row=0)


# midi cc sliders
def slider(controller, row, col, label):
	global gui_sliders

	evt_handler = lambda value : slider_event(controller, int(value))

	# store the slider value seperately so sliding events do not
	# trigger when setting value progmatically
	val = tk.IntVar()
	w = tk.Scale(content, from_=127, to=0, command=evt_handler, variable=val)

	# hack: append to a global list of slider values to reference later
	gui_sliders.append(val)

	w.set(0)
	w.grid(column=col, row=(row*2)+1)

	w = tk.Label(content, text=label)
	w.grid(column=col, row=(row*2)+2)



rows = 4
cols = 32

for row in range(rows):
	for col in range(cols):
		ch = (cols*row)+col
		slider(ch, row, col, "CH" + str(ch))


root.mainloop()

